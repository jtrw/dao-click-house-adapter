<?php

namespace Jtrw\DAO\Tests\Src;

use Jtrw\DAO\DataAccessObjectInterface;
use Jtrw\DAO\Exceptions\DatabaseException;
use Jtrw\DAO\Tests\ClickHouseConnector;
use Jtrw\DAO\ValueObject\ValueObjectInterface;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class ClickHouseObjectTest extends TestCase
{
    public const TABLE_TEST = "test";
    
    public DataAccessObjectInterface $db;
    
    public function setUp(): void
    {
        $this->db = ClickHouseConnector::getInstance();
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function testGetDataBaseType()
    {
        Assert::assertEquals(ClickHouseConnector::DRIVER_NAME, $this->db->getDatabaseType());
    }
    
    public function testInsert()
    {
        $id = random_int(0, 10000);
        $values = [
            'id' => $id,
        ];
        
        $this->db->insert(static::TABLE_TEST, $values);
        
        $sql = "SELECT * FROM ".static::TABLE_TEST;
        $search = [
            'id' => $id
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
        
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values['id'], $resultData['id']);
    }
    
    public function testDelete()
    {
        $idSetting = 2222;
        
        $values = [
            'id' => 2222,
        ];
        
        $this->db->insert(static::TABLE_TEST, $values);
        Assert::assertIsInt($idSetting);

        $this->removeSettingRow($idSetting);

        $search = [
            'id' => $idSetting
        ];

        $sql = "SELECT * FROM ".static::TABLE_TEST;

        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);

        Assert::assertEmpty($result->toNative());
    }
    
    private function removeSettingRow(int $id): void
    {
        $this->db->delete(static::TABLE_TEST, ['id' => $id]);
    }
    
    public function testDeleteTable()
    {
        $tableName = "test_".time();
        $sql = "CREATE TABLE {$tableName} (id UInt64) ENGINE = MergeTree ORDER BY id;";
        $this->db->query($sql);

        $sqlSelect = "SELECT * FROM ".$tableName;

        $result = $this->db->select($sqlSelect)->toNative();
        Assert::assertEmpty($result);

        $this->db->deleteTable($tableName);

        try {
            $this->db->select($sqlSelect)->toNative();
            Assert::fail('DatabaseException was not thrown');
        } catch (\ClickHouseDB\Exception\DatabaseException $exp) {
            $msg = sprintf("Table default.%s doesn't exist.", $tableName);
            Assert::assertEquals($exp->getCode(), 60);
            Assert::assertStringContainsString($msg, $exp->getMessage(), "Message Not Found");
        }
    }
    
    public function testGetTables()
    {
        Assert::assertSame(
            $this->db->getTables(),
            [
                static::TABLE_TEST,
            ]
        );
    }
    
    public function testAssoc()
    {
        $sql = "SELECT id FROM ".static::TABLE_TEST;

        $fetchAssocObject = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ASSOC);
        Assert::assertInstanceOf(ValueObjectInterface::class, $fetchAssocObject);

        $fetchAllObject = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ALL);
        Assert::assertInstanceOf(ValueObjectInterface::class, $fetchAllObject);

        $assocData = $fetchAssocObject->toNative();
        $allData = $fetchAllObject->toNative();
        Assert::assertNotEmpty($allData[0]);

        Assert::assertEquals($assocData[$allData[0]['id']]['id'], $allData[0]['id']);
    }
    
//    public function testUpdate()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//
//        Assert::assertNotEmpty($resultData[0]);
//        $currentValue = $resultData[0];
//
//        $newId = 1111111;
//        $values = [
//            'id' => $newId
//        ];
//
//        $search = [
//            'id' => $currentValue['id']
//        ];
//
//        $result = $this->db->update(static::TABLE_TEST, $values, $search);
//        Assert::assertIsInt($result);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql, ['id' => $newId], [], DataAccessObjectInterface::FETCH_ROW);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData);
//        Assert::assertEquals($resultData['id'], $values['id']);
//    }
    
//    public function testMassInsert()
//    {
//        $values = [
//            [
//                'id_parent' => 0,
//                'caption'   => 'massTest1',
//                'value'     => 'dataMassTest1'
//            ],
//            [
//                'id_parent' => 0,
//                'caption'   => 'massTest2',
//                'value'     => 'dataMassTest2'
//            ]
//
//        ];
//        $this->db->massInsert(static::TABLE_TEST, $values);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            'caption' => $values[1]['caption']
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData);
//        Assert::assertEquals($values[1]['value'], $resultData['value']);
//    }
//
//    public function testMassInsertInForeach()
//    {
//        $values = [
//            [
//                'id_parent' => 0,
//                'caption'   => 'massTest3',
//                'value'     => 'dataMassTest3'
//            ],
//            [
//                'id_parent' => 0,
//                'caption'   => 'massTest4',
//                'value'     => 'dataMassTest4'
//            ]
//
//        ];
//        $this->db->massInsert(static::TABLE_TEST, $values, true);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            'caption' => $values[1]['caption']
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData);
//        Assert::assertEquals($values[1]['value'], $resultData['value']);
//    }
//
//    public function testSuccessTransactions()
//    {
//        $this->db->begin();
//
//        $values = [
//            'id_parent' => 0,
//            'caption'   => 'TRANSACTION_BEGIN',
//            'value'     => 'dataTest'
//        ];
//        $this->db->insert(static::TABLE_TEST, $values);
//
//        $values['caption'] = "TRANSACTION2_BEGIN";
//
//        $idSetting = $this->db->insert(static::TABLE_TEST, $values);
//
//        $this->db->commit();
//
//        Assert::assertNotEmpty($idSetting);
//        $search = [
//            'id' => $idSetting
//        ];
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData);
//        Assert::assertEquals($resultData['id'], $idSetting);
//    }
//
//    public function testRollbackTransactions()
//    {
//        $idSetting = 0;
//        try {
//            $this->db->begin();
//
//            $values = [
//                'id_parent' => 0,
//                'caption'   => 'TRANSACTION_BEGIN',
//                'value'     => 'dataTest'
//            ];
//            $idSetting = $this->db->insert(static::TABLE_TEST, $values);
//
//            $values = [
//                'failed_field' => 0,
//            ];
//            $this->db->insert(static::TABLE_TEST, $values);
//
//            $this->db->commit();
//        } catch (DatabaseException $exp) {
//            $this->db->rollback();
//        }
//
//        Assert::assertNotEmpty($idSetting);
//        $search = [
//            'id' => $idSetting
//        ];
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
//        Assert::assertEmpty($result->toNative());
//    }
//
//    public function testSelectIn()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            'id&IN' => [1, 2, 3],
//            'id&NOT IN' => [4]
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData['0']['id']);
//        Assert::assertEquals($resultData['0']['id'], 1);
//
//        Assert::assertNotEmpty($resultData['1']['id']);
//        Assert::assertEquals($resultData['1']['id'], 2);
//
//        Assert::assertNotEmpty($resultData['2']['id']);
//        Assert::assertEquals($resultData['2']['id'], 3);
//    }
//
//    public function testSqlOr()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "sql_or" => [
//                [
//                    "caption&IS NOT" =>NULL
//                ],
//                [
//                    "id&!=" => 1
//                ]
//            ]
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        Assert::assertNotEmpty($result->toNative());
//    }
//
//    public function testOrSql()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "&or_sql" => ["id = 2", "id = 3"]
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//        Assert::assertCount(2, $resultData);
//    }
//
//    public function testSqlAnd()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            'sql_and' => [
//                [
//                    'sql_or' => [
//                        [
//                            'id' => 5,
//                        ],
//                        [
//                            'caption&IS NOT' => 'NULL',
//                        ],
//                    ],
//                ],
//                [
//                    'sql_or' => [
//                        [
//                            'id&IN' => [1, 2, 3],
//                        ],
//                        [
//                            'caption&IS NOT' => 'NULL',
//                        ],
//                    ],
//                ],
//            ],
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//        // TODO: Fix this assert
//        Assert::assertNotEmpty($resultData);
//    }
//
//    public function testOr()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "id&or&<" => [
//                2,
//                [
//                    'id' => 2
//                ]
//            ]
//        ];
//        $result = $this->db->select($sql, $search, ['id ASC'], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//
//        Assert::assertCount(2, $resultData);
//
//        Assert::assertNotEmpty($resultData[0]['id']);
//        Assert::assertEquals($resultData[0]['id'], 1);
//
//        Assert::assertNotEmpty($resultData[1]['id']);
//        Assert::assertEquals($resultData[1]['id'], 2);
//    }
//
//    public function testMatch()
//    {
//        $values = [
//            'id_parent' => 0,
//            'caption'   => 'maches',
//            'value'     => 'Full text maches data text'
//        ];
//        $idSetting = $this->db->insert(static::TABLE_TEST, $values);
//        Assert::assertIsInt($idSetting);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "value&match" => "text data"
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//
//        Assert::assertNotEmpty($resultData[0]['value']);
//        Assert::assertEquals($resultData[0]['value'], $values['value']);
//
//        $this->removeSettingRow($idSetting);
//    }
//
//    public function testBetween()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "id&between" => [1,3]
//        ];
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//        $resultData = $result->toNative();
//        Assert::assertCount(3, $resultData);
//    }
//
//    public function testSoundex()
//    {
//        $values = [
//            'id_parent' => 0,
//            'caption'   => 'Soundex',
//            'value'     => 'Search for Soundex data text'
//        ];
//        $idSetting = $this->db->insert(static::TABLE_TEST, $values);
//        Assert::assertIsInt($idSetting);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//        $search = [
//            "caption&soundex" => "Soundex"
//        ];
//
//        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ALL);
//        $resultData = $result->toNative();
//
//        Assert::assertNotEmpty($resultData[0]['value']);
//        Assert::assertEquals($resultData[0]['value'], $values['value']);
//
//        $this->removeSettingRow($idSetting);
//    }
//
    
}
